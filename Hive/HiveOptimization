TECHNIQUE #1: USE TEZ
---------------------
Hive can use the Apache Tez execution engine instead of the venerable Map-reduce engine. 

>set hive.execution.engine=tez;

TECHNIQUE #2: USE ORCFILE
-------------------------
Hive supports ORCfile, a new table storage format that sports fantastic speed improvements through techniques like predicate push-down, compression and more.
ORC supports compressed storage (with ZLIB or as shown above with SNAPPY) but also uncompressed storage.

>CREATE TABLE A_ORC (
customerID int, name string, age int, address string
) STORED AS ORC tblproperties (“orc.compress" = “SNAPPY”);

TECHNIQUE #3: USE VECTORIZATION
-------------------------------
Vectorized query execution improves performance of operations like scans, aggregations, filters and joins, by performing them in batches of 1024 rows at once instead of single row each time.

>set hive.vectorized.execution.enabled = true;
>set hive.vectorized.execution.reduce.enabled = true;

TECHNIQUE #4: COST BASED QUERY OPTIMIZATION
-------------------------------------------
Hive optimizes each query’s logical and physical execution plan before submitting for final execution. These optimizations are not based on the cost of the query – that is, until now.
A recent addition to Hive, Cost-based optimization, performs further optimizations based on query cost, resulting in potentially different decisions: how to order joins, which type of join to perform, degree of parallelism and others.
To use cost-based optimization (also known as CBO), set the following parameters at the beginning of your query:

>set hive.cbo.enable=true;
>set hive.compute.query.using.stats=true;
>set hive.stats.fetch.column.stats=true;
>set hive.stats.fetch.partition.stats=true;

TECHNIQUE #5: Avoid Global Sorting in Hive
------------------------------------------
Clause but this comes with a drawback. ORDER BY produces a result by setting the number of reducers to one, making it very inefficient for large datasets.
When a globally sorted result is not required, then we can use SORT BY clause. SORT BY produces a sorted file per reducer.
If we need to control which reducer a particular row goes to, we can use DISTRIBUTE BY clause, for example, 

>SELECT id, name, salary, dept FROM employee
DISTRIBUTE BY dept
SORT BY id ASC, name DESC;

Each dept  will be processed separately by a reducer and records will be sorted by id and name fields within each dept separately.

TECHNIQUE #6: Optimize LIMIT operator
------------------------------------
By default LIMIT operator still executes the entire query, then only returns a limited results. Because this behavior is generally wasteful, it can be avoided by setting below properties.
>hive.limit.optimize.enable=true
>hive.limit.row.max.size=100000
>hive.limit.optimize.limit.file=10

TECHNIQUE #7: Enable Mapreduce Strict Mode
-----------------------------------------
we can enable mapreduce strict mode by setting below property to strict.

>hive.mapred.mode = nonstrict

